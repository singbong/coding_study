"""
*다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행시간 효율성을 비약적으로 향상시키는 방법입니다.
*이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 합니다.
*다이나믹 프로그래밍의 구현은 일반적으로 두가지 방식(탑다운과 보텀없)으로 구성됩니다

*다이나믹 프로그래밍은 동적 계획법 이라고도 부릅니다.
*일반적인 프로그래밍 분야에서의 동적이란 어떤 의미를 가질까요?
    자료구조에서 동적 할당은 프로그램이 실행되는 도중에 실행에
    필요한 메모리를 할당하는 기법을 의미합니다.

*반면에 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없이 사용된 단어입니다.
* 다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용할 수 있습니다.
 1. 최적부분 구조(Optimal Substructure)
    큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결
 2. 중복되는 부분 문제(Overlapping Subproblem)
    동이한 작은 문제를 반복적으로 해결해야하 합니다. 



다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 대 사용할 수 있습니다.
    큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
다이나믹 프로그래밍과 분할 정복의 차이점은 **부분문제의 중복**입니다.
    다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됩니다,.
    분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않습니다.


다이나믹 프로그래밍 문제에 접근하는 방법

주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요합니다.
가장 먼저 그리디, 구현, 완전탐색 등의 아이디어로 문제를 해결할 수 있는지 검토할 수 있습니다.
    다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해 봅시다.

일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로
사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있습니다.

일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많습니다.

"""








